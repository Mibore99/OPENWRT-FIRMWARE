name: x86

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x86.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  OPENWRT_NAME: x86

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true
      
      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-cache-${{ hashFiles('**/apt/*.list') }}

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-distutils rsync unzip zlib1g-dev file wget libelf-dev \
            libfuse-dev tigervnc-standalone-server tigervnc-common \
            autoconf automake libtool autopoint device-tree-compiler \
            antlr3 gperf swig libtinfo5 libgmp3-dev libmpc-dev libmpfr-dev \
            libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autopoint \
            ccache curl libxml-parser-perl libusb-dev bin86 bcc sharutils \
            b43-fwcutter findutils grep diffutils unzip gzip bzip2 perl \
            python3-dev python3-setuptools python3-yaml subversion git-core \
            p7zip p7zip-full msmtp texinfo libreadline-dev libglib2.0-dev \
            xmlto qemu-utils upx-ucl libelf-dev fakeroot libncurses5 \
            libncurses5-dev zlib1g zlib1g-dev libssl-dev libyaml-dev \
            libxml2-dev libxslt-dev libyaml-libyaml-perl
          
          sudo timedatectl set-timezone "${{ env.TZ }}"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          df -hT

      - name: Cache OpenWrt packages
        uses: actions/cache@v3
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('openwrt/feeds.conf.default') }}

      - name: Clone source code
        working-directory: /workdir
        run: |
          git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          df -hT $PWD

      - name: Load custom feeds
        run: |
          if [ -e ${{ env.FEEDS_CONF }} ]; then
            mv ${{ env.FEEDS_CONF }} openwrt/feeds.conf.default
          fi
          chmod +x ${{ env.DIY_P1_SH }}
          cd openwrt
          $GITHUB_WORKSPACE/${{ env.DIY_P1_SH }}

      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a

      - name: Install feeds
        run: |
          cd openwrt
          ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          if [ -e files ]; then
            mv files openwrt/files
          fi
          if [ -e ${{ env.CONFIG_FILE }} ]; then
            mv ${{ env.CONFIG_FILE }} openwrt/.config
          fi
          chmod +x ${{ env.DIY_P2_SH }}
          cd openwrt
          $GITHUB_WORKSPACE/${{ env.DIY_P2_SH }}

      - name: Download packages
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo "Start compiling with $(nproc) threads"
          
          export RUST_BACKTRACE=1
          export RUSTFLAGS="-C target-cpu=native"
          
          if ! make -j$(nproc); then
            echo "Multi-thread compilation failed, trying single thread..."
            if ! make -j1; then
              echo "Single thread compilation failed, trying with verbose mode..."
              make -j1 V=s 2>&1 | tee build.log
              if [ ${PIPESTATUS[0]} -ne 0 ]; then
                echo "Compilation completely failed, last 100 lines of log:"
                tail -100 build.log
                exit 1
              fi
            fi
          fi
          
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || echo "generic" > DEVICE_NAME
          if [ -s DEVICE_NAME ]; then
            echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          fi
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: always()
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")-${{ env.OPENWRT_NAME }}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          files: ${{ env.FIRMWARE }}/*

      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 30
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build log on failure
        uses: actions/upload-artifact@main
        if: failure() && steps.compile.conclusion == 'failure'
        with:
          name: build-log-${{ env.FILE_DATE }}
          path: openwrt/build.log

      - name: Cleanup workspace
        if: always()
        run: |
          sudo rm -rf /workdir
